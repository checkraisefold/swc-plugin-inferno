use once_cell::sync::Lazy;
use swc_atoms::{js_word, JsWord};
use swc_ecma_ast::{Ident, PropName, Str};

use crate::inferno_flags::VNodeFlags;



pub fn parse_vnode_flag(tag: &JsWord) -> u16 {
    match *tag {
        js_word!("input") => VNodeFlags::InputElement as u16,
        js_word!("textarea") => VNodeFlags::TextareaElement as u16,
        js_word!("select") => VNodeFlags::SelectElement as u16,
        // SVG ELEMENTS
        js_word!("altGlyph") => VNodeFlags::SvgElement as u16,
        js_word!("altGlyphDef") => VNodeFlags::SvgElement as u16,
        js_word!("altGlyphItem") => VNodeFlags::SvgElement as u16,
        js_word!("animate") => VNodeFlags::SvgElement as u16,
        js_word!("animateColor") => VNodeFlags::SvgElement as u16,
        js_word!("animateMotion") => VNodeFlags::SvgElement as u16,
        js_word!("animateTransform") => VNodeFlags::SvgElement as u16,
        js_word!("circle") => VNodeFlags::SvgElement as u16,
        js_word!("clipPath") => VNodeFlags::SvgElement as u16,
        js_word!("color-profile") => VNodeFlags::SvgElement as u16,
        js_word!("cursor") => VNodeFlags::SvgElement as u16,
        js_word!("defs") => VNodeFlags::SvgElement as u16,
        js_word!("desc") => VNodeFlags::SvgElement as u16,
        js_word!("discard") => VNodeFlags::SvgElement as u16,
        js_word!("ellipse") => VNodeFlags::SvgElement as u16,
        js_word!("feBlend") => VNodeFlags::SvgElement as u16,
        js_word!("feColorMatrix") => VNodeFlags::SvgElement as u16,
        js_word!("feComponentTransfer") => VNodeFlags::SvgElement as u16,
        js_word!("feComposite") => VNodeFlags::SvgElement as u16,
        js_word!("feConvolveMatrix") => VNodeFlags::SvgElement as u16,
        js_word!("feDiffuseLighting") => VNodeFlags::SvgElement as u16,
        js_word!("feDisplacementMap") => VNodeFlags::SvgElement as u16,
        js_word!("feDistantLight") => VNodeFlags::SvgElement as u16,
        js_word!("feDropShadow") => VNodeFlags::SvgElement as u16,
        js_word!("feFlood") => VNodeFlags::SvgElement as u16,
        js_word!("feFuncA") => VNodeFlags::SvgElement as u16,
        js_word!("feFuncB") => VNodeFlags::SvgElement as u16,
        js_word!("feFuncG") => VNodeFlags::SvgElement as u16,
        js_word!("feFuncR") => VNodeFlags::SvgElement as u16,
        js_word!("feGaussianBlur") => VNodeFlags::SvgElement as u16,
        js_word!("feImage") => VNodeFlags::SvgElement as u16,
        js_word!("feMerge") => VNodeFlags::SvgElement as u16,
        js_word!("feMergeNode") => VNodeFlags::SvgElement as u16,
        js_word!("feMorphology") => VNodeFlags::SvgElement as u16,
        js_word!("feOffset") => VNodeFlags::SvgElement as u16,
        js_word!("fePointLight") => VNodeFlags::SvgElement as u16,
        js_word!("feSpecularLighting") => VNodeFlags::SvgElement as u16,
        js_word!("feSpotLight") => VNodeFlags::SvgElement as u16,
        js_word!("feTile") => VNodeFlags::SvgElement as u16,
        js_word!("feTurbulence") => VNodeFlags::SvgElement as u16,
        js_word!("filter") => VNodeFlags::SvgElement as u16,
        js_word!("font-face") => VNodeFlags::SvgElement as u16,
        js_word!("font-face-format") => VNodeFlags::SvgElement as u16,
        js_word!("font-face-name") => VNodeFlags::SvgElement as u16,
        js_word!("font-face-src") => VNodeFlags::SvgElement as u16,
        js_word!("font-face-uri") => VNodeFlags::SvgElement as u16,
        js_word!("foreignObject") => VNodeFlags::SvgElement as u16,
        js_word!("g") => VNodeFlags::SvgElement as u16,
        js_word!("glyph") => VNodeFlags::SvgElement as u16,
        js_word!("glyphRef") => VNodeFlags::SvgElement as u16,
        js_word!("hatch") => VNodeFlags::SvgElement as u16,
        js_word!("hatchpath") => VNodeFlags::SvgElement as u16,
        js_word!("hkern") => VNodeFlags::SvgElement as u16,
        js_word!("line") => VNodeFlags::SvgElement as u16,
        js_word!("linearGradient") => VNodeFlags::SvgElement as u16,
        js_word!("marker") => VNodeFlags::SvgElement as u16,
        js_word!("mask") => VNodeFlags::SvgElement as u16,
        js_word!("mesh") => VNodeFlags::SvgElement as u16,
        js_word!("meshgradient") => VNodeFlags::SvgElement as u16,
        js_word!("meshpatch") => VNodeFlags::SvgElement as u16,
        js_word!("meshrow") => VNodeFlags::SvgElement as u16,
        js_word!("metadata") => VNodeFlags::SvgElement as u16,
        js_word!("missing-glyph") => VNodeFlags::SvgElement as u16,
        js_word!("mpath") => VNodeFlags::SvgElement as u16,
        js_word!("path") => VNodeFlags::SvgElement as u16,
        js_word!("pattern") => VNodeFlags::SvgElement as u16,
        js_word!("polygon") => VNodeFlags::SvgElement as u16,
        js_word!("polyline") => VNodeFlags::SvgElement as u16,
        js_word!("radialGradient") => VNodeFlags::SvgElement as u16,
        js_word!("rect") => VNodeFlags::SvgElement as u16,
        js_word!("set") => VNodeFlags::SvgElement as u16,
        js_word!("solidcolor") => VNodeFlags::SvgElement as u16,
        js_word!("stop") => VNodeFlags::SvgElement as u16,
        js_word!("svg") => VNodeFlags::SvgElement as u16,
        js_word!("switch") => VNodeFlags::SvgElement as u16,
        js_word!("symbol") => VNodeFlags::SvgElement as u16,
        js_word!("text") => VNodeFlags::SvgElement as u16,
        js_word!("textPath") => VNodeFlags::SvgElement as u16,
        js_word!("tref") => VNodeFlags::SvgElement as u16,
        js_word!("tspan") => VNodeFlags::SvgElement as u16,
        js_word!("unknown") => VNodeFlags::SvgElement as u16,
        js_word!("use") => VNodeFlags::SvgElement as u16,
        js_word!("view") => VNodeFlags::SvgElement as u16,
        js_word!("vkern") => VNodeFlags::SvgElement as u16,

        _ => VNodeFlags::HtmlElement as u16,
    }
}

pub fn convert_svg_attrs(prop_ident: Ident) -> PropName {
    let new_name = match prop_ident.sym {
        js_word!("accentHeight") => js_word!("accent-height"),
        js_word!("alignmentBaseline") => js_word!("alignment-baseline"),
        js_word!("arabicForm") => js_word!("arabic-form"),
        js_word!("baselineShift") => js_word!("baseline-shift"),
        js_word!("capHeight") => js_word!("cap-height"),
        js_word!("clipPath") => js_word!("clip-path"),
        js_word!("clipRule") => js_word!("clip-rule"),
        js_word!("colorInterpolation") => js_word!("color-interpolation"),
        js_word!("colorInterpolationFilters") => js_word!("color-interpolation-filters"),
        js_word!("colorProfile") => js_word!("color-profile"),
        js_word!("colorRendering") => js_word!("color-rendering"),
        js_word!("dominantBaseline") => js_word!("dominant-baseline"),
        js_word!("enableBackground") => js_word!("enable-background"),
        js_word!("fillOpacity") => js_word!("fill-opacity"),
        js_word!("fillRule") => js_word!("fill-rule"),
        js_word!("floodColor") => js_word!("flood-color"),
        js_word!("floodOpacity") => js_word!("flood-opacity"),
        js_word!("fontFamily") => js_word!("font-family"),
        js_word!("fontSize") => js_word!("font-size"),
        js_word!("fontSizeAdjust") => js_word!("font-size-adjust"),
        js_word!("fontStretch") => js_word!("font-stretch"),
        js_word!("fontStyle") => js_word!("font-style"),
        js_word!("fontVariant") => js_word!("font-variant"),
        js_word!("fontWeight") => js_word!("font-weight"),
        js_word!("glyphName") => js_word!("glyph-name"),
        js_word!("glyphOrientationHorizontal") => js_word!("glyph-orientation-horizontal"),
        js_word!("glyphOrientationVertical") => js_word!("glyph-orientation-vertical"),
        js_word!("horizAdvX") => js_word!("horiz-adv-x"),
        js_word!("horizOriginX") => js_word!("horiz-origin-x"),
        js_word!("imageRendering") => js_word!("image-rendering"),
        js_word!("letterSpacing") => js_word!("letter-spacing"),
        js_word!("lightingColor") => js_word!("lighting-color"),
        js_word!("markerEnd") => js_word!("marker-end"),
        js_word!("markerMid") => js_word!("marker-mid"),
        js_word!("markerStart") => js_word!("marker-start"),
        js_word!("markerHeight") => js_word!("markerHeight"),
        js_word!("overlinePosition") => js_word!("overline-position"),
        js_word!("overlineThickness") => js_word!("overline-thickness"),
        js_word!("paintOrder") => js_word!("paint-order"),
        js_word!("panose1") => js_word!("panose-1"),
        js_word!("pointerEvents") => js_word!("pointer-events"),
        js_word!("renderingIntent") => js_word!("rendering-intent"),
        js_word!("shapeRendering") => js_word!("shape-rendering"),
        js_word!("stopColor") => js_word!("stop-color"),
        js_word!("stopOpacity") => js_word!("stop-opacity"),
        js_word!("strikethroughPosition") => js_word!("strikethrough-position"),
        js_word!("strikethroughThickness") => js_word!("strikethrough-thickness"),
        js_word!("strokeDasharray") => js_word!("stroke-dasharray"),
        js_word!("strokeDashoffset") => js_word!("stroke-dashoffset"),
        js_word!("strokeLinecap") => js_word!("stroke-linecap"),
        js_word!("strokeLinejoin") => js_word!("stroke-linejoin"),
        js_word!("strokeMiterlimit") => js_word!("stroke-miterlimit"),
        js_word!("strokeOpacity") => js_word!("stroke-opacity"),
        js_word!("strokeWidth") => js_word!("stroke-width"),
        js_word!("textDecoration") => js_word!("text-decoration"),
        js_word!("textRendering") => js_word!("text-rendering"),
        js_word!("underlinePosition") => js_word!("underline-position"),
        js_word!("underlineThickness") => js_word!("underline-thickness"),
        js_word!("unicodeBidi") => js_word!("unicode-bidi"),
        js_word!("unicodeRange") => js_word!("unicode-range"),
        js_word!("unitsPerEm") => js_word!("units-per-em"),
        js_word!("vAlphabetic") => js_word!("v-alphabetic"),
        js_word!("vHanging") => js_word!("v-hanging"),
        js_word!("vIdeographic") => js_word!("v-ideographic"),
        js_word!("vMathematical") => js_word!("v-mathematical"),
        js_word!("vectorEffect") => js_word!("vector-effect"),
        js_word!("vertAdvY") => js_word!("vert-adv-y"),
        js_word!("vertOriginX") => js_word!("vert-origin-x"),
        js_word!("vertOriginY") => js_word!("vert-origin-y"),
        js_word!("wordSpacing") => js_word!("word-spacing"),
        js_word!("writingMode") => js_word!("writing-mode"),
        js_word!("xHeight") => js_word!("x-height"),
        js_word!("xlinkActuate") => js_word!("xlink:actuate"),
        js_word!("xlinkArcrole") => js_word!("xlink:arcrole"),
        js_word!("xlinkHref") => js_word!("xlink:href"),
        js_word!("xlinkRole") => js_word!("xlink:role"),
        js_word!("xlinkShow") => js_word!("xlink:show"),
        js_word!("xlinkTitle") => js_word!("xlink:title"),
        js_word!("xlinkType") => js_word!("xlink:type"),
        js_word!("xmlBase") => js_word!("xml:base"),
        js_word!("xmlnsXlink") => js_word!("xmlns:xlink"),
        js_word!("xmlLang") => js_word!("xml:lang"),
        js_word!("xmlSpace") => js_word!("xml:space"),
        _ => {
            if prop_ident.sym.contains('-') {
                return PropName::Str(Str {
                    span: prop_ident.span,
                    raw: None,
                    value: prop_ident.sym,
                });
            } else {
                return PropName::Ident(prop_ident);
            }
        }
    };

    return PropName::Str(Str {
        span: prop_ident.span,
        raw: None,
        value: new_name,
    });
}
